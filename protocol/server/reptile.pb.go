// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/reptile.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrepareReplica struct {
	View                 uint32   `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	ClientOperation      string   `protobuf:"bytes,2,opt,name=clientOperation,proto3" json:"clientOperation,omitempty"`
	ClientId             string   `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientReqNum         uint32   `protobuf:"varint,4,opt,name=clientReqNum,proto3" json:"clientReqNum,omitempty"`
	OperationNum         uint32   `protobuf:"varint,5,opt,name=operationNum,proto3" json:"operationNum,omitempty"`
	CommitNum            int32    `protobuf:"varint,6,opt,name=commitNum,proto3" json:"commitNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareReplica) Reset()         { *m = PrepareReplica{} }
func (m *PrepareReplica) String() string { return proto.CompactTextString(m) }
func (*PrepareReplica) ProtoMessage()    {}
func (*PrepareReplica) Descriptor() ([]byte, []int) {
	return fileDescriptor_0100d9e854fa7d80, []int{0}
}

func (m *PrepareReplica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareReplica.Unmarshal(m, b)
}
func (m *PrepareReplica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareReplica.Marshal(b, m, deterministic)
}
func (m *PrepareReplica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareReplica.Merge(m, src)
}
func (m *PrepareReplica) XXX_Size() int {
	return xxx_messageInfo_PrepareReplica.Size(m)
}
func (m *PrepareReplica) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareReplica.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareReplica proto.InternalMessageInfo

func (m *PrepareReplica) GetView() uint32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareReplica) GetClientOperation() string {
	if m != nil {
		return m.ClientOperation
	}
	return ""
}

func (m *PrepareReplica) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *PrepareReplica) GetClientReqNum() uint32 {
	if m != nil {
		return m.ClientReqNum
	}
	return 0
}

func (m *PrepareReplica) GetOperationNum() uint32 {
	if m != nil {
		return m.OperationNum
	}
	return 0
}

func (m *PrepareReplica) GetCommitNum() int32 {
	if m != nil {
		return m.CommitNum
	}
	return 0
}

type PrepareOk struct {
	View                 uint32   `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	OperationNum         uint32   `protobuf:"varint,2,opt,name=operationNum,proto3" json:"operationNum,omitempty"`
	ReplicaNum           uint32   `protobuf:"varint,3,opt,name=replicaNum,proto3" json:"replicaNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareOk) Reset()         { *m = PrepareOk{} }
func (m *PrepareOk) String() string { return proto.CompactTextString(m) }
func (*PrepareOk) ProtoMessage()    {}
func (*PrepareOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_0100d9e854fa7d80, []int{1}
}

func (m *PrepareOk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareOk.Unmarshal(m, b)
}
func (m *PrepareOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareOk.Marshal(b, m, deterministic)
}
func (m *PrepareOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareOk.Merge(m, src)
}
func (m *PrepareOk) XXX_Size() int {
	return xxx_messageInfo_PrepareOk.Size(m)
}
func (m *PrepareOk) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareOk.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareOk proto.InternalMessageInfo

func (m *PrepareOk) GetView() uint32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareOk) GetOperationNum() uint32 {
	if m != nil {
		return m.OperationNum
	}
	return 0
}

func (m *PrepareOk) GetReplicaNum() uint32 {
	if m != nil {
		return m.ReplicaNum
	}
	return 0
}

type HeartBeat struct {
	CommitNum            int32    `protobuf:"varint,1,opt,name=commitNum,proto3" json:"commitNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0100d9e854fa7d80, []int{2}
}

func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeat.Unmarshal(m, b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
}
func (m *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(m, src)
}
func (m *HeartBeat) XXX_Size() int {
	return xxx_messageInfo_HeartBeat.Size(m)
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetCommitNum() int32 {
	if m != nil {
		return m.CommitNum
	}
	return 0
}

func init() {
	proto.RegisterType((*PrepareReplica)(nil), "pb.PrepareReplica")
	proto.RegisterType((*PrepareOk)(nil), "pb.PrepareOk")
	proto.RegisterType((*HeartBeat)(nil), "pb.HeartBeat")
}

func init() {
	proto.RegisterFile("server/reptile.proto", fileDescriptor_0100d9e854fa7d80)
}

var fileDescriptor_0100d9e854fa7d80 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4e, 0xbc, 0x30,
	0x10, 0xc7, 0xb7, 0xec, 0xbf, 0x1f, 0x93, 0x1f, 0x9a, 0x4c, 0x3c, 0x10, 0x62, 0x0c, 0xe9, 0x09,
	0x2f, 0x6c, 0xa2, 0x6f, 0xe0, 0x49, 0x2f, 0x62, 0xea, 0x13, 0x14, 0x76, 0x0e, 0x75, 0x81, 0xd6,
	0x5a, 0xd7, 0xd7, 0xf4, 0x91, 0x0c, 0x65, 0xff, 0x00, 0xd9, 0xdb, 0xcc, 0x27, 0x9f, 0xf4, 0x3b,
	0x33, 0x85, 0x9b, 0x2f, 0xb2, 0x7b, 0xb2, 0x1b, 0x4b, 0xc6, 0xa9, 0x9a, 0x72, 0x63, 0xb5, 0xd3,
	0x18, 0x98, 0x92, 0xff, 0x32, 0xb8, 0x7a, 0xb3, 0x64, 0xa4, 0x25, 0x41, 0xa6, 0x56, 0x95, 0x44,
	0x84, 0xc5, 0x5e, 0xd1, 0x4f, 0xcc, 0x52, 0x96, 0x45, 0xc2, 0xd7, 0x98, 0xc1, 0x75, 0x55, 0x2b,
	0x6a, 0x5d, 0x61, 0xc8, 0x4a, 0xa7, 0x74, 0x1b, 0x07, 0x29, 0xcb, 0x42, 0x31, 0xc5, 0x98, 0xc0,
	0xbf, 0x1e, 0xbd, 0x6c, 0xe3, 0xb9, 0x57, 0x4e, 0x3d, 0x72, 0xf8, 0xdf, 0xd7, 0x82, 0x3e, 0x5f,
	0xbf, 0x9b, 0x78, 0xe1, 0x13, 0x46, 0xac, 0x73, 0xf4, 0xf1, 0xb1, 0xce, 0x59, 0xf6, 0xce, 0x90,
	0xe1, 0x2d, 0x84, 0x95, 0x6e, 0x1a, 0xe5, 0x3a, 0x61, 0x95, 0xb2, 0x6c, 0x29, 0xce, 0x80, 0x57,
	0x10, 0x1e, 0x36, 0x2a, 0x76, 0x17, 0x97, 0x99, 0x46, 0x04, 0x17, 0x22, 0xee, 0x00, 0x6c, 0x7f,
	0x8f, 0xce, 0x98, 0x7b, 0x63, 0x40, 0xf8, 0x3d, 0x84, 0xcf, 0x24, 0xad, 0x7b, 0x22, 0xe9, 0xc6,
	0xf3, 0xb0, 0xc9, 0x3c, 0x0f, 0x1f, 0xb0, 0x3e, 0x9e, 0x36, 0x87, 0xf5, 0x61, 0x34, 0xc4, 0xdc,
	0x94, 0xf9, 0xf8, 0xf2, 0x49, 0x34, 0x60, 0xc5, 0x8e, 0xcf, 0x70, 0x03, 0xd1, 0x3b, 0xb5, 0xdb,
	0x73, 0x92, 0x37, 0x4e, 0x6d, 0x32, 0x6e, 0xf9, 0xac, 0x5c, 0xf9, 0x9f, 0x7d, 0xfc, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x9b, 0x0c, 0x24, 0xb3, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReplicaClient is the client API for Replica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicaClient interface {
	Prepare(ctx context.Context, in *PrepareReplica, opts ...grpc.CallOption) (*PrepareOk, error)
	SendHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*HeartBeat, error)
}

type replicaClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaClient(cc grpc.ClientConnInterface) ReplicaClient {
	return &replicaClient{cc}
}

func (c *replicaClient) Prepare(ctx context.Context, in *PrepareReplica, opts ...grpc.CallOption) (*PrepareOk, error) {
	out := new(PrepareOk)
	err := c.cc.Invoke(ctx, "/pb.Replica/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) SendHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*HeartBeat, error) {
	out := new(HeartBeat)
	err := c.cc.Invoke(ctx, "/pb.Replica/SendHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaServer is the server API for Replica service.
type ReplicaServer interface {
	Prepare(context.Context, *PrepareReplica) (*PrepareOk, error)
	SendHeartBeat(context.Context, *HeartBeat) (*HeartBeat, error)
}

// UnimplementedReplicaServer can be embedded to have forward compatible implementations.
type UnimplementedReplicaServer struct {
}

func (*UnimplementedReplicaServer) Prepare(ctx context.Context, req *PrepareReplica) (*PrepareOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedReplicaServer) SendHeartBeat(ctx context.Context, req *HeartBeat) (*HeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartBeat not implemented")
}

func RegisterReplicaServer(s *grpc.Server, srv ReplicaServer) {
	s.RegisterService(&_Replica_serviceDesc, srv)
}

func _Replica_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReplica)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Replica/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).Prepare(ctx, req.(*PrepareReplica))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_SendHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).SendHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Replica/SendHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).SendHeartBeat(ctx, req.(*HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Replica",
	HandlerType: (*ReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Replica_Prepare_Handler,
		},
		{
			MethodName: "SendHeartBeat",
			Handler:    _Replica_SendHeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/reptile.proto",
}
