// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client/reptile.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientRequest struct {
	Operation            string   `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	RequestNum           uint32   `protobuf:"varint,3,opt,name=requestNum,proto3" json:"requestNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fcebfe7d0110c0, []int{0}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ClientRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ClientRequest) GetRequestNum() uint32 {
	if m != nil {
		return m.RequestNum
	}
	return 0
}

type ClientResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	RequestNum           uint32   `protobuf:"varint,2,opt,name=requestNum,proto3" json:"requestNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientResponse) Reset()         { *m = ClientResponse{} }
func (m *ClientResponse) String() string { return proto.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()    {}
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fcebfe7d0110c0, []int{1}
}

func (m *ClientResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientResponse.Unmarshal(m, b)
}
func (m *ClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientResponse.Marshal(b, m, deterministic)
}
func (m *ClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientResponse.Merge(m, src)
}
func (m *ClientResponse) XXX_Size() int {
	return xxx_messageInfo_ClientResponse.Size(m)
}
func (m *ClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientResponse proto.InternalMessageInfo

func (m *ClientResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *ClientResponse) GetRequestNum() uint32 {
	if m != nil {
		return m.RequestNum
	}
	return 0
}

type ClientLog struct {
	Log                  string   `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientLog) Reset()         { *m = ClientLog{} }
func (m *ClientLog) String() string { return proto.CompactTextString(m) }
func (*ClientLog) ProtoMessage()    {}
func (*ClientLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fcebfe7d0110c0, []int{2}
}

func (m *ClientLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientLog.Unmarshal(m, b)
}
func (m *ClientLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientLog.Marshal(b, m, deterministic)
}
func (m *ClientLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientLog.Merge(m, src)
}
func (m *ClientLog) XXX_Size() int {
	return xxx_messageInfo_ClientLog.Size(m)
}
func (m *ClientLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientLog.DiscardUnknown(m)
}

var xxx_messageInfo_ClientLog proto.InternalMessageInfo

func (m *ClientLog) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *ClientLog) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "pb.ClientRequest")
	proto.RegisterType((*ClientResponse)(nil), "pb.ClientResponse")
	proto.RegisterType((*ClientLog)(nil), "pb.ClientLog")
}

func init() {
	proto.RegisterFile("client/reptile.proto", fileDescriptor_69fcebfe7d0110c0)
}

var fileDescriptor_69fcebfe7d0110c0 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc4, 0x40,
	0x0c, 0xc5, 0xb7, 0x2d, 0xa8, 0x0d, 0x54, 0x34, 0x88, 0x94, 0x2a, 0xb2, 0xf4, 0xb4, 0xa7, 0xe9,
	0xb2, 0x9e, 0x3c, 0x8b, 0x07, 0xa1, 0x78, 0xe8, 0x37, 0xb0, 0x1a, 0x87, 0x42, 0xb7, 0x19, 0xa7,
	0xd3, 0x83, 0xdf, 0x5e, 0x66, 0xd2, 0xfd, 0xa3, 0x82, 0xb7, 0xe4, 0x4d, 0xf2, 0x7b, 0x99, 0x07,
	0x57, 0x6f, 0x7d, 0x47, 0x83, 0xab, 0x2c, 0x19, 0xd7, 0xf5, 0xa4, 0x8c, 0x65, 0xc7, 0x18, 0x9b,
	0xb6, 0xb8, 0xd1, 0xcc, 0xba, 0xa7, 0x2a, 0x28, 0xed, 0xf4, 0x51, 0xd1, 0xd6, 0xb8, 0x2f, 0x19,
	0x28, 0x3b, 0xc8, 0x1e, 0xc3, 0x62, 0x43, 0x9f, 0x13, 0x8d, 0x0e, 0x6f, 0x21, 0x65, 0x43, 0xf6,
	0xd5, 0x75, 0x3c, 0xe4, 0xd1, 0x32, 0x5a, 0xa5, 0xcd, 0x41, 0xc0, 0x02, 0xce, 0xc4, 0xe7, 0xf9,
	0x3d, 0x8f, 0xc3, 0xe3, 0xbe, 0xc7, 0x3b, 0x00, 0x2b, 0x90, 0x97, 0x69, 0x9b, 0x27, 0xcb, 0x68,
	0x95, 0x35, 0x47, 0x4a, 0x59, 0xc3, 0xf9, 0xce, 0x6a, 0x34, 0x3c, 0x8c, 0xe4, 0x69, 0x76, 0xae,
	0x67, 0xab, 0x7d, 0xff, 0x8b, 0x16, 0xff, 0xa1, 0x3d, 0x40, 0x2a, 0xb4, 0x9a, 0x35, 0x5e, 0x40,
	0xd2, 0xb3, 0x9e, 0x19, 0xbe, 0xfc, 0xef, 0xd0, 0x0d, 0xc3, 0x69, 0x23, 0x29, 0xe1, 0xc6, 0x97,
	0xf2, 0xf1, 0x4b, 0x65, 0x5a, 0xf5, 0x23, 0x8b, 0x02, 0x8f, 0x25, 0xb9, 0xab, 0x5c, 0xe0, 0x1a,
	0x12, 0xef, 0x79, 0xad, 0x24, 0x57, 0xb5, 0xcb, 0x55, 0x3d, 0xf9, 0x5c, 0x8b, 0xec, 0xb0, 0x54,
	0xb3, 0x2e, 0x17, 0xeb, 0xa8, 0x3d, 0x09, 0x23, 0xf7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab,
	0x7e, 0xb3, 0xb4, 0xa4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReptileClient is the client API for Reptile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReptileClient interface {
	Request(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	Log(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Reptile_LogClient, error)
}

type reptileClient struct {
	cc grpc.ClientConnInterface
}

func NewReptileClient(cc grpc.ClientConnInterface) ReptileClient {
	return &reptileClient{cc}
}

func (c *reptileClient) Request(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, "/pb.Reptile/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reptileClient) Log(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Reptile_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Reptile_serviceDesc.Streams[0], "/pb.Reptile/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &reptileLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Reptile_LogClient interface {
	Recv() (*ClientLog, error)
	grpc.ClientStream
}

type reptileLogClient struct {
	grpc.ClientStream
}

func (x *reptileLogClient) Recv() (*ClientLog, error) {
	m := new(ClientLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReptileServer is the server API for Reptile service.
type ReptileServer interface {
	Request(context.Context, *ClientRequest) (*ClientResponse, error)
	Log(*empty.Empty, Reptile_LogServer) error
}

// UnimplementedReptileServer can be embedded to have forward compatible implementations.
type UnimplementedReptileServer struct {
}

func (*UnimplementedReptileServer) Request(ctx context.Context, req *ClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (*UnimplementedReptileServer) Log(req *empty.Empty, srv Reptile_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}

func RegisterReptileServer(s *grpc.Server, srv ReptileServer) {
	s.RegisterService(&_Reptile_serviceDesc, srv)
}

func _Reptile_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReptileServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Reptile/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReptileServer).Request(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reptile_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReptileServer).Log(m, &reptileLogServer{stream})
}

type Reptile_LogServer interface {
	Send(*ClientLog) error
	grpc.ServerStream
}

type reptileLogServer struct {
	grpc.ServerStream
}

func (x *reptileLogServer) Send(m *ClientLog) error {
	return x.ServerStream.SendMsg(m)
}

var _Reptile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Reptile",
	HandlerType: (*ReptileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Reptile_Request_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _Reptile_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client/reptile.proto",
}
